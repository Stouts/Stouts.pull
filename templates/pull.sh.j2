#!/bin/bash

# This file was generated by Ansible for {{ansible_fqdn}}
# Do NOT modify this file by hand!

do_sendmail() {
    command -v mail || return 1
    echo -e "$1" | mail -s "[{{inventory_hostname}}]PULL" "{{ pull_mail_to|default(pull_mail_to) }}"
}

do_pull() {
    local prefix="$1"
    local repo="$2"
    local playbook="$3"
    local key="$4"
    local logfile="$5"
    local version="$6"
    local changed="$7"

    touch $logfile
    echo "\nPULL: Start $(date)" >> $logfile

    echo "PULL: Copy private key" >> $logfile
    cp -f ~/.ssh/$key ~/.ssh/id_rsa

    echo "PULL: Check for ansible-pull is already running" >> $logfile
    ps -ef | grep ansible-pull | grep -v grep && echo "PULL: Already running - EXIT" >> $logfile && return 1

    echo "PULL: Check reposotiry" >> $logfile
    ansible-pull -d $prefix -i $prefix.ini -U $repo -C $version $changed -e "@$prefix.json" -{{pull_verbose}} $playbook >> $logfile 2>&1

{% if pull_mail_to %}
    if [ $? -ne 0 ]; then
        # echo "I am trying to send notify about an error."
        # do_sendmail "{{inventory_hostname}} updating has failed."
    fi
{% endif -%}

    if [ $? -eq 0 ]; then
        [ -d $prefix/.git ] && cd $prefix && git submodule update >> $logfile 2>&1
    fi

    return

}

# Restore PATH
export PATH=$PATH:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

{% for app in pull_sources %}

{% set logfile = pull_logdir + '/' + app.name + '.log' -%}
{% set repo = app.repo|default(pull_repo) -%}
{% set playbook = app.playbook|default(pull_playbook) -%}
{% set key = app.key|default(None) -%}
{% if not key and pull_private_keys %}{% set key = pull_private_keys[0]|basename %}{% endif %}
{% if repo and playbook and key %}

# Check updates for {{app.name}}
# =================={{ "=" * app.name|length }}

do_pull {{pull_workdir}}/{{app.name}} {{repo}} {{playbook}} {{key}} {{logfile}} {{app.version|default(pull_version)}} {{"-o" if app.only_if_changed|default(pull_only_if_changed) else ""}}

{% endif %}
{% endfor %}


exit $?
